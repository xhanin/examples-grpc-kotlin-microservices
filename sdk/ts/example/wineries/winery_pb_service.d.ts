/* eslint-disable */
/*Proudly generated by GenDocu.com*/
// package: winery
// file: example/wineries/winery.proto

import * as example_wineries_winery_pb from "../../example/wineries/winery_pb";
import {grpc} from "@improbable-eng/grpc-web";

type WineryServiceListAll = {
  readonly methodName: string;
  readonly service: typeof WineryService;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof example_wineries_winery_pb.ListAllWineriesRequest;
  readonly responseType: typeof example_wineries_winery_pb.Winery;
};

type WineryServiceGetById = {
  readonly methodName: string;
  readonly service: typeof WineryService;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof example_wineries_winery_pb.GetWineryByIdRequest;
  readonly responseType: typeof example_wineries_winery_pb.Winery;
};

export class WineryService {
  static readonly serviceName: string;
  static readonly ListAll: WineryServiceListAll;
  static readonly GetById: WineryServiceGetById;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class WineryServiceClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  listAll(requestMessage: example_wineries_winery_pb.ListAllWineriesRequest, metadata?: grpc.Metadata): ResponseStream<example_wineries_winery_pb.Winery>;
  getById(
    requestMessage: example_wineries_winery_pb.GetWineryByIdRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: example_wineries_winery_pb.Winery|null) => void
  ): UnaryResponse;
  getById(
    requestMessage: example_wineries_winery_pb.GetWineryByIdRequest,
    callback: (error: ServiceError|null, responseMessage: example_wineries_winery_pb.Winery|null) => void
  ): UnaryResponse;
}

